# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    LaSalle\GroupSeven\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    LaSalle\GroupSeven\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    monolog.formatter.custom:
        class: Monolog\Formatter\JsonFormatter

#    Symfony\Bridge\Monolog\Handler\ElasticsearchLogstashHandler:
#        arguments:
#            $endpoint: '%env(MONOLOG_ELASTICSEARCH_ENDPOINT)%'

    #LaSalle\GroupSeven\Log\Infrastructure\Framework\Command\LogEntriesCommand: //4.4
        #tags: //4.3
            #- { name: 'console.command', command: 'app:log-entries' } // 4.3
        #arguments: //4.4
            #$getLogEntriesByEnvironmentUseCase: '@LaSalle\GroupSeven\Log\Application\GetLogEntriesByEnvironmentUseCase' //4.4

    #LaSalle\GroupSeven\LogSummary\Infrastructure\Framework\Command\LogSummariesCommand: //4.4
        #tags: //4.3
            #- { name: 'console.command', command: 'app:log:summaries' } //4.3
        #arguments: //4.4
            #$getLogSummariesByEnvironmentAndLevelsUseCase: '@LaSalle\GroupSeven\LogSummary\Application\GetLogSummariesByEnvironmentAndLevelsUseCase' //4.4

    #LaSalle\GroupSeven\LogSummary\Application\GetLogSummariesByEnvironmentAndLevelsUseCase: //4.4
        #arguments: //4.4
            #$repository: '@LaSalle\GroupSeven\LogSummary\Infrastructure\Persistence\InMemoryLogSummaryRepository' //4.4

    #LaSalle\GroupSeven\Log\Application\GetLogEntriesByEnvironmentUseCase: //4.4
        #arguments: //4.4
            #$repository: '@LaSalle\GroupSeven\Log\Infrastructure\Persistence\FilesystemLogRepository' //4.4

    #LaSalle\GroupSeven\LogSummary\Infrastructure\Persistence\InMemoryLogSummaryRepository: //4.4
        #arguments: //4.4
            #$getLogEntriesByEnvironmentUseCase: '@LaSalle\GroupSeven\Log\Application\GetLogEntriesByEnvironmentUseCase' //4.4

    #LaSalle\GroupSeven\Log\Infrastructure\Persistence\FilesystemLogRepository: //4.4
        #arguments: //4.4
            #$parameterBag: '@Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface' //4.4

    #LaSalle\GroupSeven\LogSummary\Application\AddLogEntryToLogSummaryWhenLogEntryCreated:
        #tags: ['kernel.event_listener']
        #arguments:
            #$repository: '@LaSalle\GroupSeven\LogSummary\Infrastructure\Persistence\CachePoolLogSummaryRepository'

    LaSalle\GroupSeven\LogSummary\Application\GetLogSummariesByEnvironmentAndLevelsUseCase:
        arguments:
            $repository: '@LaSalle\GroupSeven\LogSummary\Infrastructure\Persistence\Doctrine\DoctrineLogSummaryRepository'

    LaSalle\GroupSeven\LogSummary\Application\AddLogEntryToLogSummaryWhenLogEntryCreated:
        tags: ['messenger.message_handler']
        arguments:
            $repository: '@LaSalle\GroupSeven\LogSummary\Infrastructure\Persistence\Doctrine\DoctrineLogSummaryRepository'

    LaSalle\GroupSeven\Log\Application\CreateLogEntryUseCase:
        arguments:
            $domainEventBus: '@LaSalle\GroupSeven\Core\Infrastructure\Framework\Event\SymfonyMessengerDomainEventBus'

    LaSalle\GroupSeven\Controller\Api\GetLogSummariesController:
        arguments:
            $getLogSummariesByEnvironmentAndLevelsUseCase: '@LaSalle\GroupSeven\LogSummary\Application\GetLogSummariesByEnvironmentAndLevelsUseCase'

    LaSalle\GroupSeven\Log\Domain\Repository\LogRepository:
        '@LaSalle\GroupSeven\Log\Infrastructure\Persistence\Doctrine\DoctrineLogEntryRepository'

    LaSalle\GroupSeven\Core\Domain\Framework\Event\DomainEventBus:
        alias: 'LaSalle\GroupSeven\Core\Infrastructure\Framework\Event\SymfonyMessengerDomainEventBus'

    LaSalle\GroupSeven\User\Domain\UserRepository:
        alias: 'LaSalle\GroupSeven\User\Infrastructure\Persistence\Doctrine\DoctrineUserRepository'


    #registrar SendMailWhenUserRegister como listener del evento UserRegisteredDomainEnvent, con Symfony Messenger para el repositorio mailer
        #LaSalle\GroupSeven\User\Application\SendEmailWhenUserRegistered:
        #tags: [ 'messenger.message_handler' ]
            #arguments:
          #$mailRepository: '@LaSalle\GroupSeven\User\Infrastructure\Framework\Mailer\MailerRepository'

        #LaSalle\GroupSeven\User\Application\SendEmailWhenUserRegistered:
        #tags: ['kernel.event_listener']
            #arguments:
        #$mailRepository: '@LaSalle\GroupSeven\User\Infrastructure\Framework\Mailer\MailerRepository'

    symfony.messenger.handler.send_email_when_user_registered:
        class: LaSalle\GroupSeven\User\Application\SendEmailWhenUserRegistered
        tags:
            - { name: messenger.message_handler }